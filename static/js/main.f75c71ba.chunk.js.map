{"version":3,"sources":["components/Header.jsx","data.js","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddSinopse.jsx","components/AddRating.jsx","components/AddGenre.jsx","components/AddButton.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","movies","title","subtitle","storyline","rating","imagePath","bookmarked","genre","Rating","this","props","data-testid","defaultProps","MovieCard","movie","alt","src","MovieList","map","key","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","htmlFor","type","name","value","onChange","checked","AddSinopse","handleChange","AddRating","AddGenre","AddButton","handleClick","onClick","AddMovie","state","bind","event","target","setState","MovieLibrary","handleChanges","favoriteMovies","genreMovies","stateChildrenNewMovie","push","newMovies","forEach","indexOf","textMovies","SearchText","App","dataMovies","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f75c71ba.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieList;\n","// implement SearchBar component here\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    const { searchText, onSearchTextChange, bookmarkedOnly,\n      onBookmarkedChange, selectedGenre, onSelectedGenreChange } = this.props;\n\n    return (\n      <form data-testid=\"search-bar-form\">\n        <label htmlFor=\"searchText\" data-testid=\"text-input-label\">\n          Inclui o texto\n          <input\n            type=\"text\"\n            name=\"searchText\"\n            value={ searchText }\n            onChange={ onSearchTextChange }\n            data-testid=\"text-input\"\n          />\n        </label>\n        <label htmlFor=\"bookmarkedOnly\" data-testid=\"checkbox-input-label\">\n          Mostrar somente favoritos\n          <input\n            type=\"checkbox\"\n            name=\"bookmarkedOnly\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n            data-testid=\"checkbox-input\"\n          />\n        </label>\n        <label htmlFor=\"selectedGenre\" data-testid=\"select-input-label\">\n          Filtrar por gênero\n          <select\n            name=\"selectedGenre\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n            data-testid=\"select-input\"\n          >\n            <option value=\"\" data-testid=\"select-option\">Todos</option>\n            <option value=\"action\" data-testid=\"select-option\">Ação</option>\n            <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n            <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: propTypes.string.isRequired,\n  onSearchTextChange: propTypes.func.isRequired,\n  bookmarkedOnly: propTypes.bool.isRequired,\n  onBookmarkedChange: propTypes.func.isRequired,\n  selectedGenre: propTypes.string.isRequired,\n  onSelectedGenreChange: propTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass AddSinopse extends React.Component {\n  render() {\n    const { storyline, handleChange } = this.props;\n    return (\n      <label htmlFor=\"storyline\" data-testid=\"storyline-input-label\">\n        Sinopse\n        <textarea\n          name=\"storyline\"\n          value={ storyline }\n          data-testid=\"storyline-input\"\n          onChange={ handleChange }\n        />\n      </label>\n    );\n  }\n}\n\nAddSinopse.propTypes = {\n  storyline: propTypes.string.isRequired,\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default AddSinopse;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass AddRating extends React.Component {\n  render() {\n    const { rating, handleChange } = this.props;\n    return (\n      <label htmlFor=\"rating\" data-testid=\"rating-input-label\">\n        Avaliação\n        <input\n          type=\"number\"\n          name=\"rating\"\n          value={ rating }\n          data-testid=\"rating-input\"\n          onChange={ handleChange }\n        />\n      </label>\n    );\n  }\n}\n\nAddRating.propTypes = {\n  rating: propTypes.number.isRequired,\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default AddRating;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass AddGenre extends React.Component {\n  render() {\n    const { genre, handleChange } = this.props;\n    return (\n      <label htmlFor=\"genre\" data-testid=\"genre-input-label\">\n        Gênero\n        <select\n          name=\"genre\"\n          value={ genre }\n          data-testid=\"genre-input\"\n          onChange={ handleChange }\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nAddGenre.propTypes = {\n  genre: propTypes.string.isRequired,\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default AddGenre;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass AddButton extends React.Component {\n  render() {\n    const { handleClick } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"send-button\"\n        onClick={ handleClick }\n      >\n        Adicionar filme\n      </button>\n    );\n  }\n}\n\nAddButton.propTypes = {\n  handleClick: propTypes.func.isRequired,\n};\n\nexport default AddButton;\n","// implement AddMovie component here\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport AddSinopse from './AddSinopse';\nimport AddRating from './AddRating';\nimport AddGenre from './AddGenre';\nimport AddButton from './AddButton';\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  render() {\n    const { subtitle, title, imagePath, storyline, rating, genre } = this.state;\n\n    return (\n      <form data-testid=\"add-movie-form\">\n        <label htmlFor=\"title\" data-testid=\"title-input-label\">\n          Título\n          <input\n            name=\"title\"\n            type=\"text\"\n            value={ title }\n            data-testid=\"title-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <label htmlFor=\"subtitulo\" data-testid=\"subtitle-input-label\">\n          Subtítulo\n          <input\n            name=\"subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            data-testid=\"subtitle-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <label htmlFor=\"imagePath\" data-testid=\"image-input-label\">\n          Imagem\n          <input\n            name=\"imagePath\"\n            type=\"text\"\n            value={ imagePath }\n            data-testid=\"image-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n\n        <AddSinopse storyline={ storyline } handleChange={ this.handleChange } />\n        <AddRating rating={ rating } handleChange={ this.handleChange } />\n        <AddGenre genre={ genre } handleChange={ this.handleChange } />\n        <AddButton handleClick={ this.handleClick } />\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: propTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","// implement MovieLibrary component here\nimport React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n    };\n\n    this.handleChanges = this.handleChanges.bind(this);\n    this.favoriteMovies = this.favoriteMovies.bind(this);\n    this.genreMovies = this.genreMovies.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  handleChanges({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({ [name]: value });\n  }\n\n  // funcao usada no addMovie e passada como prop:\n  onClick(stateChildrenNewMovie) {\n    const { movies } = this.props;\n    movies.push(stateChildrenNewMovie);\n  }\n\n  favoriteMovies(movies) {\n    const newMovies = [];\n    movies.forEach((movie) => {\n      if (movie.bookmarked === true) newMovies.push(movie);\n    });\n    return newMovies;\n  }\n\n  genreMovies(movies) {\n    const newMovies = [];\n    const { selectedGenre } = this.state;\n    movies.forEach((movie) => {\n      if (movie.genre === selectedGenre) newMovies.push(movie);\n    });\n    return newMovies;\n  }\n\n  textMovies(movies) {\n    const newMovies = [];\n    const { searchText } = this.state;\n    movies.forEach((movie) => {\n      if (movie.title.indexOf(searchText) > 0\n      || movie.subtitle.indexOf(searchText) > 0\n      || movie.storyline.indexOf(searchText) > 0) newMovies.push(movie);\n    });\n    return newMovies;\n  }\n\n  render() {\n    let { movies } = this.props;\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\n\n    // se checkbox do bookmarkedOnly for true, lista apenas filmes marcados como favoritos:\n    if (bookmarkedOnly === true) movies = this.favoriteMovies(movies);\n    // se selectedGenre não estiver vazio mostre apenas filmes com esse genero:\n    if (selectedGenre !== '') movies = this.genreMovies(movies);\n    // se searchText não estiver vazio mostra filmes com titulo, subtitulo ou sinopse com as letras/palavras:\n    if (searchText !== '') movies = this.textMovies(movies);\n\n    return (\n      <div>\n        <h2> My awesome movie library </h2>\n        <SearchBar\n          SearchText={ searchText }\n          onSearchTextChange={ this.handleChanges }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChanges }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChanges }\n        />\n        <MovieList movies={ movies } />\n        <AddMovie onClick={ this.onClick } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: propTypes.arrayOf(propTypes.number, propTypes.string).isRequired,\n};\n\nexport default MovieLibrary;\n","import React from 'react';\nimport Header from './components/Header';\nimport dataMovies from './data';\nimport './App.css';\nimport MovieLibrary from './components/MovieLibrary';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ dataMovies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}